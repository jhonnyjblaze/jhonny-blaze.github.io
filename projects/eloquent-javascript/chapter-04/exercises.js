////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// if step is not defined then it equals 1
function range(start, stop, step = 1) {
  // assign variable named range to empty array literal
  let range = [];
  // check if start strictly equals stop if so return range
  if (start === stop) { return range; }
  // check if start is less than stop
  if (start < stop) {
    // if true assign range to Array.from sequence generator (range)
    range = Array.from({ length: (stop - start) / step + 1}, (_, i) => start + (i * step));
  }
  // return range
  return range;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// input Array param into sum function 
function sum(arr) {
  // assign 0 to variable named sum
  let sum = 0;
  // iterare the input Array
  for(let i in arr) { 
    // sum plus equals each value for each Array element
    sum += arr[i];
  }
  // return sum
  return sum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// No clue why these solution do not pass

function reverseArray(arr) {
  // assign variable named output to in place reverse of input Array
  let output = arr.reverse();
  // return output
  return output;

  // let output = [];
  // for (let i = arr.length - 1; i > 0; i -= 1) {
  //   // removes the first element of array
  //   arr.shift();
  //   // adds current index to the end of the array
  //   arr.push(i);
  //   // assigns current value of arr to output
  //   output = arr;
  // }
  // // returns output
  // return output;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  // assign variable named output to in place reverse of input Array
  let output = arr.reverse();
  // return output
  return output;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList() {

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray() {

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
